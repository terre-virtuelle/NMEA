// Generated from NMEA.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import NMEAListener from './NMEAListener.js';
const serializedATN = [4,1,24,835,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,1,0,1,0,5,0,33,8,0,10,0,12,0,36,9,0,1,0,1,0,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,53,8,1,1,2,1,2,1,2,1,2,5,
2,59,8,2,10,2,12,2,62,9,2,1,2,1,2,5,2,66,8,2,10,2,12,2,69,9,2,1,2,1,2,5,
2,73,8,2,10,2,12,2,76,9,2,1,2,1,2,5,2,80,8,2,10,2,12,2,83,9,2,1,2,1,2,5,
2,87,8,2,10,2,12,2,90,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,100,8,3,1,
3,1,3,1,3,1,3,1,3,3,3,107,8,3,1,3,1,3,1,3,1,3,1,3,3,3,114,8,3,1,3,1,3,1,
3,1,4,1,4,1,4,1,4,5,4,123,8,4,10,4,12,4,126,9,4,1,4,1,4,5,4,130,8,4,10,4,
12,4,133,9,4,1,4,1,4,5,4,137,8,4,10,4,12,4,140,9,4,1,4,1,4,5,4,144,8,4,10,
4,12,4,147,9,4,1,4,1,4,5,4,151,8,4,10,4,12,4,154,9,4,1,4,1,4,5,4,158,8,4,
10,4,12,4,161,9,4,1,4,5,4,164,8,4,10,4,12,4,167,9,4,1,4,1,4,5,4,171,8,4,
10,4,12,4,174,9,4,1,4,1,4,5,4,178,8,4,10,4,12,4,181,9,4,1,4,1,4,5,4,185,
8,4,10,4,12,4,188,9,4,1,4,5,4,191,8,4,10,4,12,4,194,9,4,1,4,1,4,1,4,1,4,
5,4,200,8,4,10,4,12,4,203,9,4,1,4,5,4,206,8,4,10,4,12,4,209,9,4,1,4,1,4,
5,4,213,8,4,10,4,12,4,216,9,4,1,4,4,4,219,8,4,11,4,12,4,220,1,4,1,4,5,4,
225,8,4,10,4,12,4,228,9,4,1,4,5,4,231,8,4,10,4,12,4,234,9,4,1,4,5,4,237,
8,4,10,4,12,4,240,9,4,1,4,1,4,1,5,1,5,1,5,1,5,5,5,248,8,5,10,5,12,5,251,
9,5,1,5,1,5,5,5,255,8,5,10,5,12,5,258,9,5,1,5,1,5,5,5,262,8,5,10,5,12,5,
265,9,5,1,5,1,5,5,5,269,8,5,10,5,12,5,272,9,5,1,5,1,5,5,5,276,8,5,10,5,12,
5,279,9,5,1,5,1,5,1,5,5,5,284,8,5,10,5,12,5,287,9,5,1,5,5,5,290,8,5,10,5,
12,5,293,9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,5,6,303,8,6,10,6,12,6,306,9,
6,1,6,1,6,1,6,5,6,311,8,6,10,6,12,6,314,9,6,1,6,5,6,317,8,6,10,6,12,6,320,
9,6,1,6,1,6,5,6,324,8,6,10,6,12,6,327,9,6,1,6,5,6,330,8,6,10,6,12,6,333,
9,6,1,6,1,6,5,6,337,8,6,10,6,12,6,340,9,6,1,6,5,6,343,8,6,10,6,12,6,346,
9,6,1,6,1,6,5,6,350,8,6,10,6,12,6,353,9,6,1,6,5,6,356,8,6,10,6,12,6,359,
9,6,1,6,1,6,5,6,363,8,6,10,6,12,6,366,9,6,1,6,5,6,369,8,6,10,6,12,6,372,
9,6,1,6,1,6,5,6,376,8,6,10,6,12,6,379,9,6,1,6,5,6,382,8,6,10,6,12,6,385,
9,6,1,6,1,6,5,6,389,8,6,10,6,12,6,392,9,6,1,6,5,6,395,8,6,10,6,12,6,398,
9,6,1,6,1,6,5,6,402,8,6,10,6,12,6,405,9,6,1,6,5,6,408,8,6,10,6,12,6,411,
9,6,1,6,1,6,5,6,415,8,6,10,6,12,6,418,9,6,1,6,5,6,421,8,6,10,6,12,6,424,
9,6,1,6,1,6,5,6,428,8,6,10,6,12,6,431,9,6,1,6,5,6,434,8,6,10,6,12,6,437,
9,6,1,6,1,6,5,6,441,8,6,10,6,12,6,444,9,6,1,6,5,6,447,8,6,10,6,12,6,450,
9,6,1,6,1,6,5,6,454,8,6,10,6,12,6,457,9,6,1,6,5,6,460,8,6,10,6,12,6,463,
9,6,1,6,1,6,5,6,467,8,6,10,6,12,6,470,9,6,1,6,5,6,473,8,6,10,6,12,6,476,
9,6,1,6,1,6,5,6,480,8,6,10,6,12,6,483,9,6,1,6,5,6,486,8,6,10,6,12,6,489,
9,6,1,6,1,6,5,6,493,8,6,10,6,12,6,496,9,6,1,6,5,6,499,8,6,10,6,12,6,502,
9,6,1,6,1,6,1,7,1,7,1,7,1,7,4,7,510,8,7,11,7,12,7,511,1,7,1,7,1,8,1,8,1,
8,1,8,1,8,1,8,5,8,522,8,8,10,8,12,8,525,9,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,
1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,5,10,547,8,10,10,
10,12,10,550,9,10,1,10,1,10,1,10,1,10,5,10,556,8,10,10,10,12,10,559,9,10,
1,10,1,10,5,10,563,8,10,10,10,12,10,566,9,10,1,10,1,10,5,10,570,8,10,10,
10,12,10,573,9,10,1,10,1,10,5,10,577,8,10,10,10,12,10,580,9,10,1,10,1,10,
5,10,584,8,10,10,10,12,10,587,9,10,1,10,5,10,590,8,10,10,10,12,10,593,9,
10,1,10,1,10,5,10,597,8,10,10,10,12,10,600,9,10,1,10,1,10,5,10,604,8,10,
10,10,12,10,607,9,10,1,10,1,10,5,10,611,8,10,10,10,12,10,614,9,10,1,10,1,
10,5,10,618,8,10,10,10,12,10,621,9,10,1,10,1,10,5,10,625,8,10,10,10,12,10,
628,9,10,1,10,5,10,631,8,10,10,10,12,10,634,9,10,3,10,636,8,10,1,10,1,10,
1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,
12,1,12,5,12,656,8,12,10,12,12,12,659,9,12,1,12,5,12,662,8,12,10,12,12,12,
665,9,12,1,12,1,12,5,12,669,8,12,10,12,12,12,672,9,12,1,12,1,12,5,12,676,
8,12,10,12,12,12,679,9,12,1,12,5,12,682,8,12,10,12,12,12,685,9,12,1,12,1,
12,5,12,689,8,12,10,12,12,12,692,9,12,1,12,1,12,5,12,696,8,12,10,12,12,12,
699,9,12,1,12,5,12,702,8,12,10,12,12,12,705,9,12,1,12,1,12,5,12,709,8,12,
10,12,12,12,712,9,12,1,12,1,12,5,12,716,8,12,10,12,12,12,719,9,12,1,12,5,
12,722,8,12,10,12,12,12,725,9,12,1,12,1,12,5,12,729,8,12,10,12,12,12,732,
9,12,1,12,1,12,1,13,1,13,1,13,1,13,5,13,740,8,13,10,13,12,13,743,9,13,1,
13,5,13,746,8,13,10,13,12,13,749,9,13,1,13,1,13,1,13,1,13,5,13,755,8,13,
10,13,12,13,758,9,13,1,13,5,13,761,8,13,10,13,12,13,764,9,13,1,13,1,13,1,
13,1,13,5,13,770,8,13,10,13,12,13,773,9,13,1,13,5,13,776,8,13,10,13,12,13,
779,9,13,1,13,1,13,1,13,1,13,5,13,785,8,13,10,13,12,13,788,9,13,1,13,5,13,
791,8,13,10,13,12,13,794,9,13,1,13,1,13,1,13,5,13,799,8,13,10,13,12,13,802,
9,13,1,13,5,13,805,8,13,10,13,12,13,808,9,13,1,13,1,13,1,14,1,14,1,14,1,
14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,5,14,823,8,14,10,14,12,14,826,9,14,
5,14,828,8,14,10,14,12,14,831,9,14,1,14,1,14,1,14,0,0,15,0,2,4,6,8,10,12,
14,16,18,20,22,24,26,28,0,3,2,0,16,16,23,23,2,0,16,16,18,18,2,0,16,16,20,
20,937,0,34,1,0,0,0,2,52,1,0,0,0,4,54,1,0,0,0,6,93,1,0,0,0,8,118,1,0,0,0,
10,243,1,0,0,0,12,296,1,0,0,0,14,505,1,0,0,0,16,515,1,0,0,0,18,528,1,0,0,
0,20,542,1,0,0,0,22,639,1,0,0,0,24,651,1,0,0,0,26,735,1,0,0,0,28,811,1,0,
0,0,30,33,3,2,1,0,31,33,5,17,0,0,32,30,1,0,0,0,32,31,1,0,0,0,33,36,1,0,0,
0,34,32,1,0,0,0,34,35,1,0,0,0,35,37,1,0,0,0,36,34,1,0,0,0,37,38,5,0,0,1,
38,1,1,0,0,0,39,53,3,4,2,0,40,53,3,6,3,0,41,53,3,8,4,0,42,53,3,10,5,0,43,
53,3,12,6,0,44,53,3,14,7,0,45,53,3,16,8,0,46,53,3,18,9,0,47,53,3,20,10,0,
48,53,3,22,11,0,49,53,3,24,12,0,50,53,3,26,13,0,51,53,3,28,14,0,52,39,1,
0,0,0,52,40,1,0,0,0,52,41,1,0,0,0,52,42,1,0,0,0,52,43,1,0,0,0,52,44,1,0,
0,0,52,45,1,0,0,0,52,46,1,0,0,0,52,47,1,0,0,0,52,48,1,0,0,0,52,49,1,0,0,
0,52,50,1,0,0,0,52,51,1,0,0,0,53,3,1,0,0,0,54,55,5,15,0,0,55,56,5,1,0,0,
56,60,5,18,0,0,57,59,5,23,0,0,58,57,1,0,0,0,59,62,1,0,0,0,60,58,1,0,0,0,
60,61,1,0,0,0,61,63,1,0,0,0,62,60,1,0,0,0,63,67,5,18,0,0,64,66,5,23,0,0,
65,64,1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,70,1,0,0,0,69,
67,1,0,0,0,70,74,5,18,0,0,71,73,5,16,0,0,72,71,1,0,0,0,73,76,1,0,0,0,74,
72,1,0,0,0,74,75,1,0,0,0,75,77,1,0,0,0,76,74,1,0,0,0,77,81,5,18,0,0,78,80,
5,23,0,0,79,78,1,0,0,0,80,83,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,84,1,
0,0,0,83,81,1,0,0,0,84,88,5,18,0,0,85,87,7,0,0,0,86,85,1,0,0,0,87,90,1,0,
0,0,88,86,1,0,0,0,88,89,1,0,0,0,89,91,1,0,0,0,90,88,1,0,0,0,91,92,5,22,0,
0,92,5,1,0,0,0,93,94,5,15,0,0,94,95,5,2,0,0,95,99,5,18,0,0,96,100,5,18,0,
0,97,98,5,16,0,0,98,100,5,18,0,0,99,96,1,0,0,0,99,97,1,0,0,0,100,101,1,0,
0,0,101,102,5,23,0,0,102,106,5,18,0,0,103,107,5,18,0,0,104,105,5,16,0,0,
105,107,5,18,0,0,106,103,1,0,0,0,106,104,1,0,0,0,107,108,1,0,0,0,108,109,
5,23,0,0,109,113,5,18,0,0,110,114,5,18,0,0,111,112,5,16,0,0,112,114,5,18,
0,0,113,110,1,0,0,0,113,111,1,0,0,0,114,115,1,0,0,0,115,116,5,23,0,0,116,
117,5,22,0,0,117,7,1,0,0,0,118,119,5,15,0,0,119,120,5,3,0,0,120,124,5,18,
0,0,121,123,5,16,0,0,122,121,1,0,0,0,123,126,1,0,0,0,124,122,1,0,0,0,124,
125,1,0,0,0,125,127,1,0,0,0,126,124,1,0,0,0,127,131,5,18,0,0,128,130,5,16,
0,0,129,128,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,
134,1,0,0,0,133,131,1,0,0,0,134,138,5,18,0,0,135,137,5,23,0,0,136,135,1,
0,0,0,137,140,1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,141,1,0,0,0,140,
138,1,0,0,0,141,145,5,18,0,0,142,144,5,16,0,0,143,142,1,0,0,0,144,147,1,
0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,148,1,0,0,0,147,145,1,0,0,0,148,
152,5,18,0,0,149,151,5,23,0,0,150,149,1,0,0,0,151,154,1,0,0,0,152,150,1,
0,0,0,152,153,1,0,0,0,153,155,1,0,0,0,154,152,1,0,0,0,155,159,5,18,0,0,156,
158,5,4,0,0,157,156,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,159,160,1,0,
0,0,160,165,1,0,0,0,161,159,1,0,0,0,162,164,5,16,0,0,163,162,1,0,0,0,164,
167,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,168,1,0,0,0,167,165,1,0,
0,0,168,172,5,18,0,0,169,171,5,16,0,0,170,169,1,0,0,0,171,174,1,0,0,0,172,
170,1,0,0,0,172,173,1,0,0,0,173,175,1,0,0,0,174,172,1,0,0,0,175,179,5,18,
0,0,176,178,5,16,0,0,177,176,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,0,179,
180,1,0,0,0,180,182,1,0,0,0,181,179,1,0,0,0,182,186,5,18,0,0,183,185,5,19,
0,0,184,183,1,0,0,0,185,188,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,
192,1,0,0,0,188,186,1,0,0,0,189,191,5,16,0,0,190,189,1,0,0,0,191,194,1,0,
0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,195,1,0,0,0,194,192,1,0,0,0,195,
196,5,18,0,0,196,197,5,23,0,0,197,201,5,18,0,0,198,200,5,19,0,0,199,198,
1,0,0,0,200,203,1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,207,1,0,0,0,
203,201,1,0,0,0,204,206,5,16,0,0,205,204,1,0,0,0,206,209,1,0,0,0,207,205,
1,0,0,0,207,208,1,0,0,0,208,210,1,0,0,0,209,207,1,0,0,0,210,214,5,18,0,0,
211,213,5,23,0,0,212,211,1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,215,
1,0,0,0,215,218,1,0,0,0,216,214,1,0,0,0,217,219,5,18,0,0,218,217,1,0,0,0,
219,220,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,221,226,1,0,0,0,222,223,
5,16,0,0,223,225,5,18,0,0,224,222,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,
0,226,227,1,0,0,0,227,232,1,0,0,0,228,226,1,0,0,0,229,231,7,0,0,0,230,229,
1,0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,238,1,0,0,0,
234,232,1,0,0,0,235,237,5,18,0,0,236,235,1,0,0,0,237,240,1,0,0,0,238,236,
1,0,0,0,238,239,1,0,0,0,239,241,1,0,0,0,240,238,1,0,0,0,241,242,5,22,0,0,
242,9,1,0,0,0,243,244,5,15,0,0,244,245,5,5,0,0,245,249,5,18,0,0,246,248,
5,16,0,0,247,246,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,
250,252,1,0,0,0,251,249,1,0,0,0,252,256,5,18,0,0,253,255,5,23,0,0,254,253,
1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,259,1,0,0,0,
258,256,1,0,0,0,259,263,5,18,0,0,260,262,5,16,0,0,261,260,1,0,0,0,262,265,
1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,266,1,0,0,0,265,263,1,0,0,0,
266,270,5,18,0,0,267,269,5,23,0,0,268,267,1,0,0,0,269,272,1,0,0,0,270,268,
1,0,0,0,270,271,1,0,0,0,271,273,1,0,0,0,272,270,1,0,0,0,273,277,5,18,0,0,
274,276,5,16,0,0,275,274,1,0,0,0,276,279,1,0,0,0,277,275,1,0,0,0,277,278,
1,0,0,0,278,280,1,0,0,0,279,277,1,0,0,0,280,281,5,18,0,0,281,285,5,23,0,
0,282,284,5,18,0,0,283,282,1,0,0,0,284,287,1,0,0,0,285,283,1,0,0,0,285,286,
1,0,0,0,286,291,1,0,0,0,287,285,1,0,0,0,288,290,5,23,0,0,289,288,1,0,0,0,
290,293,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,294,1,0,0,0,293,291,
1,0,0,0,294,295,5,22,0,0,295,11,1,0,0,0,296,297,5,15,0,0,297,298,5,6,0,0,
298,299,5,18,0,0,299,300,5,23,0,0,300,304,5,18,0,0,301,303,5,4,0,0,302,301,
1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,307,1,0,0,0,
306,304,1,0,0,0,307,308,5,16,0,0,308,318,5,18,0,0,309,311,5,4,0,0,310,309,
1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,315,1,0,0,0,
314,312,1,0,0,0,315,317,5,16,0,0,316,312,1,0,0,0,317,320,1,0,0,0,318,316,
1,0,0,0,318,319,1,0,0,0,319,321,1,0,0,0,320,318,1,0,0,0,321,331,5,18,0,0,
322,324,5,4,0,0,323,322,1,0,0,0,324,327,1,0,0,0,325,323,1,0,0,0,325,326,
1,0,0,0,326,328,1,0,0,0,327,325,1,0,0,0,328,330,5,16,0,0,329,325,1,0,0,0,
330,333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,334,1,0,0,0,333,331,
1,0,0,0,334,344,5,18,0,0,335,337,5,4,0,0,336,335,1,0,0,0,337,340,1,0,0,0,
338,336,1,0,0,0,338,339,1,0,0,0,339,341,1,0,0,0,340,338,1,0,0,0,341,343,
5,16,0,0,342,338,1,0,0,0,343,346,1,0,0,0,344,342,1,0,0,0,344,345,1,0,0,0,
345,347,1,0,0,0,346,344,1,0,0,0,347,357,5,18,0,0,348,350,5,4,0,0,349,348,
1,0,0,0,350,353,1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,354,1,0,0,0,
353,351,1,0,0,0,354,356,5,16,0,0,355,351,1,0,0,0,356,359,1,0,0,0,357,355,
1,0,0,0,357,358,1,0,0,0,358,360,1,0,0,0,359,357,1,0,0,0,360,370,5,18,0,0,
361,363,5,4,0,0,362,361,1,0,0,0,363,366,1,0,0,0,364,362,1,0,0,0,364,365,
1,0,0,0,365,367,1,0,0,0,366,364,1,0,0,0,367,369,5,16,0,0,368,364,1,0,0,0,
369,372,1,0,0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,373,1,0,0,0,372,370,
1,0,0,0,373,383,5,18,0,0,374,376,5,4,0,0,375,374,1,0,0,0,376,379,1,0,0,0,
377,375,1,0,0,0,377,378,1,0,0,0,378,380,1,0,0,0,379,377,1,0,0,0,380,382,
5,16,0,0,381,377,1,0,0,0,382,385,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,
384,386,1,0,0,0,385,383,1,0,0,0,386,396,5,18,0,0,387,389,5,4,0,0,388,387,
1,0,0,0,389,392,1,0,0,0,390,388,1,0,0,0,390,391,1,0,0,0,391,393,1,0,0,0,
392,390,1,0,0,0,393,395,5,16,0,0,394,390,1,0,0,0,395,398,1,0,0,0,396,394,
1,0,0,0,396,397,1,0,0,0,397,399,1,0,0,0,398,396,1,0,0,0,399,409,5,18,0,0,
400,402,5,4,0,0,401,400,1,0,0,0,402,405,1,0,0,0,403,401,1,0,0,0,403,404,
1,0,0,0,404,406,1,0,0,0,405,403,1,0,0,0,406,408,5,16,0,0,407,403,1,0,0,0,
408,411,1,0,0,0,409,407,1,0,0,0,409,410,1,0,0,0,410,412,1,0,0,0,411,409,
1,0,0,0,412,422,5,18,0,0,413,415,5,4,0,0,414,413,1,0,0,0,415,418,1,0,0,0,
416,414,1,0,0,0,416,417,1,0,0,0,417,419,1,0,0,0,418,416,1,0,0,0,419,421,
5,16,0,0,420,416,1,0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,422,423,1,0,0,0,
423,425,1,0,0,0,424,422,1,0,0,0,425,435,5,18,0,0,426,428,5,4,0,0,427,426,
1,0,0,0,428,431,1,0,0,0,429,427,1,0,0,0,429,430,1,0,0,0,430,432,1,0,0,0,
431,429,1,0,0,0,432,434,5,16,0,0,433,429,1,0,0,0,434,437,1,0,0,0,435,433,
1,0,0,0,435,436,1,0,0,0,436,438,1,0,0,0,437,435,1,0,0,0,438,448,5,18,0,0,
439,441,5,4,0,0,440,439,1,0,0,0,441,444,1,0,0,0,442,440,1,0,0,0,442,443,
1,0,0,0,443,445,1,0,0,0,444,442,1,0,0,0,445,447,5,16,0,0,446,442,1,0,0,0,
447,450,1,0,0,0,448,446,1,0,0,0,448,449,1,0,0,0,449,451,1,0,0,0,450,448,
1,0,0,0,451,461,5,18,0,0,452,454,5,4,0,0,453,452,1,0,0,0,454,457,1,0,0,0,
455,453,1,0,0,0,455,456,1,0,0,0,456,458,1,0,0,0,457,455,1,0,0,0,458,460,
5,16,0,0,459,455,1,0,0,0,460,463,1,0,0,0,461,459,1,0,0,0,461,462,1,0,0,0,
462,464,1,0,0,0,463,461,1,0,0,0,464,474,5,18,0,0,465,467,5,4,0,0,466,465,
1,0,0,0,467,470,1,0,0,0,468,466,1,0,0,0,468,469,1,0,0,0,469,471,1,0,0,0,
470,468,1,0,0,0,471,473,5,16,0,0,472,468,1,0,0,0,473,476,1,0,0,0,474,472,
1,0,0,0,474,475,1,0,0,0,475,477,1,0,0,0,476,474,1,0,0,0,477,487,5,18,0,0,
478,480,5,4,0,0,479,478,1,0,0,0,480,483,1,0,0,0,481,479,1,0,0,0,481,482,
1,0,0,0,482,484,1,0,0,0,483,481,1,0,0,0,484,486,5,16,0,0,485,481,1,0,0,0,
486,489,1,0,0,0,487,485,1,0,0,0,487,488,1,0,0,0,488,490,1,0,0,0,489,487,
1,0,0,0,490,500,5,18,0,0,491,493,5,4,0,0,492,491,1,0,0,0,493,496,1,0,0,0,
494,492,1,0,0,0,494,495,1,0,0,0,495,497,1,0,0,0,496,494,1,0,0,0,497,499,
5,16,0,0,498,494,1,0,0,0,499,502,1,0,0,0,500,498,1,0,0,0,500,501,1,0,0,0,
501,503,1,0,0,0,502,500,1,0,0,0,503,504,5,22,0,0,504,13,1,0,0,0,505,506,
5,15,0,0,506,507,5,7,0,0,507,509,5,18,0,0,508,510,7,1,0,0,509,508,1,0,0,
0,510,511,1,0,0,0,511,509,1,0,0,0,511,512,1,0,0,0,512,513,1,0,0,0,513,514,
5,22,0,0,514,15,1,0,0,0,515,516,5,15,0,0,516,517,5,8,0,0,517,518,5,18,0,
0,518,519,5,16,0,0,519,523,5,18,0,0,520,522,5,23,0,0,521,520,1,0,0,0,522,
525,1,0,0,0,523,521,1,0,0,0,523,524,1,0,0,0,524,526,1,0,0,0,525,523,1,0,
0,0,526,527,5,22,0,0,527,17,1,0,0,0,528,529,5,15,0,0,529,530,5,9,0,0,530,
531,5,18,0,0,531,532,5,16,0,0,532,533,5,18,0,0,533,534,5,23,0,0,534,535,
5,18,0,0,535,536,5,16,0,0,536,537,5,18,0,0,537,538,5,23,0,0,538,539,5,18,
0,0,539,540,5,23,0,0,540,541,5,22,0,0,541,19,1,0,0,0,542,543,5,15,0,0,543,
544,5,10,0,0,544,548,5,18,0,0,545,547,5,16,0,0,546,545,1,0,0,0,547,550,1,
0,0,0,548,546,1,0,0,0,548,549,1,0,0,0,549,551,1,0,0,0,550,548,1,0,0,0,551,
552,5,18,0,0,552,553,5,23,0,0,553,557,5,18,0,0,554,556,5,16,0,0,555,554,
1,0,0,0,556,559,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,558,560,1,0,0,0,
559,557,1,0,0,0,560,564,5,18,0,0,561,563,5,23,0,0,562,561,1,0,0,0,563,566,
1,0,0,0,564,562,1,0,0,0,564,565,1,0,0,0,565,567,1,0,0,0,566,564,1,0,0,0,
567,571,5,18,0,0,568,570,5,16,0,0,569,568,1,0,0,0,570,573,1,0,0,0,571,569,
1,0,0,0,571,572,1,0,0,0,572,574,1,0,0,0,573,571,1,0,0,0,574,578,5,18,0,0,
575,577,5,23,0,0,576,575,1,0,0,0,577,580,1,0,0,0,578,576,1,0,0,0,578,579,
1,0,0,0,579,581,1,0,0,0,580,578,1,0,0,0,581,585,5,18,0,0,582,584,5,19,0,
0,583,582,1,0,0,0,584,587,1,0,0,0,585,583,1,0,0,0,585,586,1,0,0,0,586,591,
1,0,0,0,587,585,1,0,0,0,588,590,5,16,0,0,589,588,1,0,0,0,590,593,1,0,0,0,
591,589,1,0,0,0,591,592,1,0,0,0,592,594,1,0,0,0,593,591,1,0,0,0,594,598,
5,18,0,0,595,597,5,16,0,0,596,595,1,0,0,0,597,600,1,0,0,0,598,596,1,0,0,
0,598,599,1,0,0,0,599,601,1,0,0,0,600,598,1,0,0,0,601,605,5,18,0,0,602,604,
5,16,0,0,603,602,1,0,0,0,604,607,1,0,0,0,605,603,1,0,0,0,605,606,1,0,0,0,
606,608,1,0,0,0,607,605,1,0,0,0,608,612,5,18,0,0,609,611,5,16,0,0,610,609,
1,0,0,0,611,614,1,0,0,0,612,610,1,0,0,0,612,613,1,0,0,0,613,615,1,0,0,0,
614,612,1,0,0,0,615,619,5,18,0,0,616,618,5,23,0,0,617,616,1,0,0,0,618,621,
1,0,0,0,619,617,1,0,0,0,619,620,1,0,0,0,620,635,1,0,0,0,621,619,1,0,0,0,
622,623,5,18,0,0,623,625,5,23,0,0,624,622,1,0,0,0,625,628,1,0,0,0,626,624,
1,0,0,0,626,627,1,0,0,0,627,636,1,0,0,0,628,626,1,0,0,0,629,631,5,18,0,0,
630,629,1,0,0,0,631,634,1,0,0,0,632,630,1,0,0,0,632,633,1,0,0,0,633,636,
1,0,0,0,634,632,1,0,0,0,635,626,1,0,0,0,635,632,1,0,0,0,636,637,1,0,0,0,
637,638,5,22,0,0,638,21,1,0,0,0,639,640,5,15,0,0,640,641,5,11,0,0,641,642,
5,18,0,0,642,643,7,2,0,0,643,644,5,18,0,0,644,645,5,23,0,0,645,646,5,18,
0,0,646,647,5,16,0,0,647,648,5,18,0,0,648,649,5,23,0,0,649,650,5,22,0,0,
650,23,1,0,0,0,651,652,5,15,0,0,652,653,5,12,0,0,653,657,5,18,0,0,654,656,
5,4,0,0,655,654,1,0,0,0,656,659,1,0,0,0,657,655,1,0,0,0,657,658,1,0,0,0,
658,663,1,0,0,0,659,657,1,0,0,0,660,662,5,16,0,0,661,660,1,0,0,0,662,665,
1,0,0,0,663,661,1,0,0,0,663,664,1,0,0,0,664,666,1,0,0,0,665,663,1,0,0,0,
666,670,5,18,0,0,667,669,5,23,0,0,668,667,1,0,0,0,669,672,1,0,0,0,670,668,
1,0,0,0,670,671,1,0,0,0,671,673,1,0,0,0,672,670,1,0,0,0,673,677,5,18,0,0,
674,676,5,4,0,0,675,674,1,0,0,0,676,679,1,0,0,0,677,675,1,0,0,0,677,678,
1,0,0,0,678,683,1,0,0,0,679,677,1,0,0,0,680,682,5,16,0,0,681,680,1,0,0,0,
682,685,1,0,0,0,683,681,1,0,0,0,683,684,1,0,0,0,684,686,1,0,0,0,685,683,
1,0,0,0,686,690,5,18,0,0,687,689,5,23,0,0,688,687,1,0,0,0,689,692,1,0,0,
0,690,688,1,0,0,0,690,691,1,0,0,0,691,693,1,0,0,0,692,690,1,0,0,0,693,697,
5,18,0,0,694,696,5,4,0,0,695,694,1,0,0,0,696,699,1,0,0,0,697,695,1,0,0,0,
697,698,1,0,0,0,698,703,1,0,0,0,699,697,1,0,0,0,700,702,5,16,0,0,701,700,
1,0,0,0,702,705,1,0,0,0,703,701,1,0,0,0,703,704,1,0,0,0,704,706,1,0,0,0,
705,703,1,0,0,0,706,710,5,18,0,0,707,709,5,23,0,0,708,707,1,0,0,0,709,712,
1,0,0,0,710,708,1,0,0,0,710,711,1,0,0,0,711,713,1,0,0,0,712,710,1,0,0,0,
713,717,5,18,0,0,714,716,5,4,0,0,715,714,1,0,0,0,716,719,1,0,0,0,717,715,
1,0,0,0,717,718,1,0,0,0,718,723,1,0,0,0,719,717,1,0,0,0,720,722,5,16,0,0,
721,720,1,0,0,0,722,725,1,0,0,0,723,721,1,0,0,0,723,724,1,0,0,0,724,726,
1,0,0,0,725,723,1,0,0,0,726,730,5,18,0,0,727,729,5,23,0,0,728,727,1,0,0,
0,729,732,1,0,0,0,730,728,1,0,0,0,730,731,1,0,0,0,731,733,1,0,0,0,732,730,
1,0,0,0,733,734,5,22,0,0,734,25,1,0,0,0,735,736,5,15,0,0,736,737,5,13,0,
0,737,741,5,18,0,0,738,740,5,4,0,0,739,738,1,0,0,0,740,743,1,0,0,0,741,739,
1,0,0,0,741,742,1,0,0,0,742,747,1,0,0,0,743,741,1,0,0,0,744,746,5,16,0,0,
745,744,1,0,0,0,746,749,1,0,0,0,747,745,1,0,0,0,747,748,1,0,0,0,748,750,
1,0,0,0,749,747,1,0,0,0,750,751,5,18,0,0,751,752,5,23,0,0,752,756,5,18,0,
0,753,755,5,4,0,0,754,753,1,0,0,0,755,758,1,0,0,0,756,754,1,0,0,0,756,757,
1,0,0,0,757,762,1,0,0,0,758,756,1,0,0,0,759,761,5,16,0,0,760,759,1,0,0,0,
761,764,1,0,0,0,762,760,1,0,0,0,762,763,1,0,0,0,763,765,1,0,0,0,764,762,
1,0,0,0,765,766,5,18,0,0,766,767,5,23,0,0,767,771,5,18,0,0,768,770,5,4,0,
0,769,768,1,0,0,0,770,773,1,0,0,0,771,769,1,0,0,0,771,772,1,0,0,0,772,777,
1,0,0,0,773,771,1,0,0,0,774,776,5,16,0,0,775,774,1,0,0,0,776,779,1,0,0,0,
777,775,1,0,0,0,777,778,1,0,0,0,778,780,1,0,0,0,779,777,1,0,0,0,780,781,
5,18,0,0,781,782,5,23,0,0,782,786,5,18,0,0,783,785,5,4,0,0,784,783,1,0,0,
0,785,788,1,0,0,0,786,784,1,0,0,0,786,787,1,0,0,0,787,792,1,0,0,0,788,786,
1,0,0,0,789,791,5,16,0,0,790,789,1,0,0,0,791,794,1,0,0,0,792,790,1,0,0,0,
792,793,1,0,0,0,793,795,1,0,0,0,794,792,1,0,0,0,795,800,5,18,0,0,796,797,
5,23,0,0,797,799,5,18,0,0,798,796,1,0,0,0,799,802,1,0,0,0,800,798,1,0,0,
0,800,801,1,0,0,0,801,806,1,0,0,0,802,800,1,0,0,0,803,805,5,23,0,0,804,803,
1,0,0,0,805,808,1,0,0,0,806,804,1,0,0,0,806,807,1,0,0,0,807,809,1,0,0,0,
808,806,1,0,0,0,809,810,5,22,0,0,810,27,1,0,0,0,811,812,5,15,0,0,812,813,
5,14,0,0,813,829,5,18,0,0,814,815,5,23,0,0,815,816,5,18,0,0,816,817,7,2,
0,0,817,818,5,18,0,0,818,819,5,23,0,0,819,820,5,18,0,0,820,824,5,23,0,0,
821,823,5,18,0,0,822,821,1,0,0,0,823,826,1,0,0,0,824,822,1,0,0,0,824,825,
1,0,0,0,825,828,1,0,0,0,826,824,1,0,0,0,827,814,1,0,0,0,828,831,1,0,0,0,
829,827,1,0,0,0,829,830,1,0,0,0,830,832,1,0,0,0,831,829,1,0,0,0,832,833,
5,22,0,0,833,29,1,0,0,0,107,32,34,52,60,67,74,81,88,99,106,113,124,131,138,
145,152,159,165,172,179,186,192,201,207,214,220,226,232,238,249,256,263,
270,277,285,291,304,312,318,325,331,338,344,351,357,364,370,377,383,390,
396,403,409,416,422,429,435,442,448,455,461,468,474,481,487,494,500,511,
523,548,557,564,571,578,585,591,598,605,612,619,626,632,635,657,663,670,
677,683,690,697,703,710,717,723,730,741,747,756,762,771,777,786,792,800,
806,824,829];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class NMEAParser extends antlr4.Parser {

    static grammarFileName = "NMEA.g4";
    static literalNames = [ null, "'AAM'", "'DBT'", "'GGA'", "' '", "'GLL'", 
                            "'GSA'", "'GSV'", "'HDT'", "'MWV'", "'RMC'", 
                            "'RSA'", "'VHW'", "'VTG'", "'XDR'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, "DEVICE", 
                             "NUMBER", "EMPTY_LINE", "SEP", "SIGN", "SIGNED", 
                             "TIME_STAMP", "CHECKSUM", "LETTERS", "EXPONENT" ];
    static ruleNames = [ "nmea", "sentence", "aam", "dbt", "gga", "gll", 
                         "gsa", "gsv", "hdt", "mwv", "rmc", "rsa", "vhw", 
                         "vtg", "xdr" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = NMEAParser.ruleNames;
        this.literalNames = NMEAParser.literalNames;
        this.symbolicNames = NMEAParser.symbolicNames;
    }



	nmea() {
	    let localctx = new NmeaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, NMEAParser.RULE_nmea);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 34;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===15 || _la===17) {
	            this.state = 32;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 15:
	                this.state = 30;
	                this.sentence();
	                break;
	            case 17:
	                this.state = 31;
	                this.match(NMEAParser.EMPTY_LINE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 36;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 37;
	        this.match(NMEAParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sentence() {
	    let localctx = new SentenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, NMEAParser.RULE_sentence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 52;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 39;
	            this.aam();
	            break;

	        case 2:
	            this.state = 40;
	            this.dbt();
	            break;

	        case 3:
	            this.state = 41;
	            this.gga();
	            break;

	        case 4:
	            this.state = 42;
	            this.gll();
	            break;

	        case 5:
	            this.state = 43;
	            this.gsa();
	            break;

	        case 6:
	            this.state = 44;
	            this.gsv();
	            break;

	        case 7:
	            this.state = 45;
	            this.hdt();
	            break;

	        case 8:
	            this.state = 46;
	            this.mwv();
	            break;

	        case 9:
	            this.state = 47;
	            this.rmc();
	            break;

	        case 10:
	            this.state = 48;
	            this.rsa();
	            break;

	        case 11:
	            this.state = 49;
	            this.vhw();
	            break;

	        case 12:
	            this.state = 50;
	            this.vtg();
	            break;

	        case 13:
	            this.state = 51;
	            this.xdr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aam() {
	    let localctx = new AamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, NMEAParser.RULE_aam);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 54;
	        this.match(NMEAParser.DEVICE);
	        this.state = 55;
	        this.match(NMEAParser.T__0);
	        this.state = 56;
	        this.match(NMEAParser.SEP);
	        this.state = 60;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 57;
	            this.match(NMEAParser.LETTERS);
	            this.state = 62;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 63;
	        this.match(NMEAParser.SEP);
	        this.state = 67;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 64;
	            this.match(NMEAParser.LETTERS);
	            this.state = 69;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 70;
	        this.match(NMEAParser.SEP);
	        this.state = 74;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 71;
	            this.match(NMEAParser.NUMBER);
	            this.state = 76;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 77;
	        this.match(NMEAParser.SEP);
	        this.state = 81;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 78;
	            this.match(NMEAParser.LETTERS);
	            this.state = 83;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 84;
	        this.match(NMEAParser.SEP);
	        this.state = 88;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16 || _la===23) {
	            this.state = 85;
	            _la = this._input.LA(1);
	            if(!(_la===16 || _la===23)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 90;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 91;
	        this.match(NMEAParser.CHECKSUM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dbt() {
	    let localctx = new DbtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, NMEAParser.RULE_dbt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 93;
	        this.match(NMEAParser.DEVICE);
	        this.state = 94;
	        this.match(NMEAParser.T__1);
	        this.state = 95;
	        this.match(NMEAParser.SEP);
	        this.state = 99;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 18:
	            this.state = 96;
	            this.match(NMEAParser.SEP);
	            break;
	        case 16:
	            this.state = 97;
	            this.match(NMEAParser.NUMBER);
	            this.state = 98;
	            this.match(NMEAParser.SEP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 101;
	        this.match(NMEAParser.LETTERS);
	        this.state = 102;
	        this.match(NMEAParser.SEP);
	        this.state = 106;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 18:
	            this.state = 103;
	            this.match(NMEAParser.SEP);
	            break;
	        case 16:
	            this.state = 104;
	            this.match(NMEAParser.NUMBER);
	            this.state = 105;
	            this.match(NMEAParser.SEP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 108;
	        this.match(NMEAParser.LETTERS);
	        this.state = 109;
	        this.match(NMEAParser.SEP);
	        this.state = 113;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 18:
	            this.state = 110;
	            this.match(NMEAParser.SEP);
	            break;
	        case 16:
	            this.state = 111;
	            this.match(NMEAParser.NUMBER);
	            this.state = 112;
	            this.match(NMEAParser.SEP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 115;
	        this.match(NMEAParser.LETTERS);
	        this.state = 116;
	        this.match(NMEAParser.CHECKSUM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gga() {
	    let localctx = new GgaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, NMEAParser.RULE_gga);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 118;
	        this.match(NMEAParser.DEVICE);
	        this.state = 119;
	        this.match(NMEAParser.T__2);
	        this.state = 120;
	        this.match(NMEAParser.SEP);
	        this.state = 124;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 121;
	            this.match(NMEAParser.NUMBER);
	            this.state = 126;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 127;
	        this.match(NMEAParser.SEP);
	        this.state = 131;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 128;
	            this.match(NMEAParser.NUMBER);
	            this.state = 133;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 134;
	        this.match(NMEAParser.SEP);
	        this.state = 138;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 135;
	            this.match(NMEAParser.LETTERS);
	            this.state = 140;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 141;
	        this.match(NMEAParser.SEP);
	        this.state = 145;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 142;
	            this.match(NMEAParser.NUMBER);
	            this.state = 147;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 148;
	        this.match(NMEAParser.SEP);
	        this.state = 152;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 149;
	            this.match(NMEAParser.LETTERS);
	            this.state = 154;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 155;
	        this.match(NMEAParser.SEP);
	        this.state = 159;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4) {
	            this.state = 156;
	            this.match(NMEAParser.T__3);
	            this.state = 161;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 165;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 162;
	            this.match(NMEAParser.NUMBER);
	            this.state = 167;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 168;
	        this.match(NMEAParser.SEP);
	        this.state = 172;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 169;
	            this.match(NMEAParser.NUMBER);
	            this.state = 174;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 175;
	        this.match(NMEAParser.SEP);
	        this.state = 179;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 176;
	            this.match(NMEAParser.NUMBER);
	            this.state = 181;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 182;
	        this.match(NMEAParser.SEP);
	        this.state = 186;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 183;
	            this.match(NMEAParser.SIGN);
	            this.state = 188;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 192;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 189;
	            this.match(NMEAParser.NUMBER);
	            this.state = 194;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 195;
	        this.match(NMEAParser.SEP);
	        this.state = 196;
	        this.match(NMEAParser.LETTERS);
	        this.state = 197;
	        this.match(NMEAParser.SEP);
	        this.state = 201;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 198;
	            this.match(NMEAParser.SIGN);
	            this.state = 203;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 207;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 204;
	            this.match(NMEAParser.NUMBER);
	            this.state = 209;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 210;
	        this.match(NMEAParser.SEP);
	        this.state = 214;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 211;
	            this.match(NMEAParser.LETTERS);
	            this.state = 216;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 218; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 217;
	        		this.match(NMEAParser.SEP);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 220; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,25, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 226;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,26,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 222;
	                this.match(NMEAParser.NUMBER);
	                this.state = 223;
	                this.match(NMEAParser.SEP); 
	            }
	            this.state = 228;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,26,this._ctx);
	        }

	        this.state = 232;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16 || _la===23) {
	            this.state = 229;
	            _la = this._input.LA(1);
	            if(!(_la===16 || _la===23)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 234;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 238;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===18) {
	            this.state = 235;
	            this.match(NMEAParser.SEP);
	            this.state = 240;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 241;
	        this.match(NMEAParser.CHECKSUM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gll() {
	    let localctx = new GllContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, NMEAParser.RULE_gll);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 243;
	        this.match(NMEAParser.DEVICE);
	        this.state = 244;
	        this.match(NMEAParser.T__4);
	        this.state = 245;
	        this.match(NMEAParser.SEP);
	        this.state = 249;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 246;
	            this.match(NMEAParser.NUMBER);
	            this.state = 251;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 252;
	        this.match(NMEAParser.SEP);
	        this.state = 256;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 253;
	            this.match(NMEAParser.LETTERS);
	            this.state = 258;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 259;
	        this.match(NMEAParser.SEP);
	        this.state = 263;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 260;
	            this.match(NMEAParser.NUMBER);
	            this.state = 265;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 266;
	        this.match(NMEAParser.SEP);
	        this.state = 270;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 267;
	            this.match(NMEAParser.LETTERS);
	            this.state = 272;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 273;
	        this.match(NMEAParser.SEP);
	        this.state = 277;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 274;
	            this.match(NMEAParser.NUMBER);
	            this.state = 279;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 280;
	        this.match(NMEAParser.SEP);
	        this.state = 281;
	        this.match(NMEAParser.LETTERS);
	        this.state = 285;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===18) {
	            this.state = 282;
	            this.match(NMEAParser.SEP);
	            this.state = 287;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 291;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 288;
	            this.match(NMEAParser.LETTERS);
	            this.state = 293;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 294;
	        this.match(NMEAParser.CHECKSUM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gsa() {
	    let localctx = new GsaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, NMEAParser.RULE_gsa);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 296;
	        this.match(NMEAParser.DEVICE);
	        this.state = 297;
	        this.match(NMEAParser.T__5);
	        this.state = 298;
	        this.match(NMEAParser.SEP);
	        this.state = 299;
	        this.match(NMEAParser.LETTERS);
	        this.state = 300;
	        this.match(NMEAParser.SEP);
	        this.state = 304;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4) {
	            this.state = 301;
	            this.match(NMEAParser.T__3);
	            this.state = 306;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 307;
	        this.match(NMEAParser.NUMBER);
	        this.state = 308;
	        this.match(NMEAParser.SEP);
	        this.state = 318;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4 || _la===16) {
	            this.state = 312;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 309;
	                this.match(NMEAParser.T__3);
	                this.state = 314;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 315;
	            this.match(NMEAParser.NUMBER);
	            this.state = 320;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 321;
	        this.match(NMEAParser.SEP);
	        this.state = 331;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4 || _la===16) {
	            this.state = 325;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 322;
	                this.match(NMEAParser.T__3);
	                this.state = 327;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 328;
	            this.match(NMEAParser.NUMBER);
	            this.state = 333;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 334;
	        this.match(NMEAParser.SEP);
	        this.state = 344;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4 || _la===16) {
	            this.state = 338;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 335;
	                this.match(NMEAParser.T__3);
	                this.state = 340;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 341;
	            this.match(NMEAParser.NUMBER);
	            this.state = 346;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 347;
	        this.match(NMEAParser.SEP);
	        this.state = 357;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4 || _la===16) {
	            this.state = 351;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 348;
	                this.match(NMEAParser.T__3);
	                this.state = 353;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 354;
	            this.match(NMEAParser.NUMBER);
	            this.state = 359;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 360;
	        this.match(NMEAParser.SEP);
	        this.state = 370;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4 || _la===16) {
	            this.state = 364;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 361;
	                this.match(NMEAParser.T__3);
	                this.state = 366;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 367;
	            this.match(NMEAParser.NUMBER);
	            this.state = 372;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 373;
	        this.match(NMEAParser.SEP);
	        this.state = 383;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4 || _la===16) {
	            this.state = 377;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 374;
	                this.match(NMEAParser.T__3);
	                this.state = 379;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 380;
	            this.match(NMEAParser.NUMBER);
	            this.state = 385;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 386;
	        this.match(NMEAParser.SEP);
	        this.state = 396;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4 || _la===16) {
	            this.state = 390;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 387;
	                this.match(NMEAParser.T__3);
	                this.state = 392;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 393;
	            this.match(NMEAParser.NUMBER);
	            this.state = 398;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 399;
	        this.match(NMEAParser.SEP);
	        this.state = 409;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4 || _la===16) {
	            this.state = 403;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 400;
	                this.match(NMEAParser.T__3);
	                this.state = 405;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 406;
	            this.match(NMEAParser.NUMBER);
	            this.state = 411;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 412;
	        this.match(NMEAParser.SEP);
	        this.state = 422;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4 || _la===16) {
	            this.state = 416;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 413;
	                this.match(NMEAParser.T__3);
	                this.state = 418;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 419;
	            this.match(NMEAParser.NUMBER);
	            this.state = 424;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 425;
	        this.match(NMEAParser.SEP);
	        this.state = 435;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4 || _la===16) {
	            this.state = 429;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 426;
	                this.match(NMEAParser.T__3);
	                this.state = 431;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 432;
	            this.match(NMEAParser.NUMBER);
	            this.state = 437;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 438;
	        this.match(NMEAParser.SEP);
	        this.state = 448;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4 || _la===16) {
	            this.state = 442;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 439;
	                this.match(NMEAParser.T__3);
	                this.state = 444;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 445;
	            this.match(NMEAParser.NUMBER);
	            this.state = 450;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 451;
	        this.match(NMEAParser.SEP);
	        this.state = 461;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4 || _la===16) {
	            this.state = 455;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 452;
	                this.match(NMEAParser.T__3);
	                this.state = 457;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 458;
	            this.match(NMEAParser.NUMBER);
	            this.state = 463;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 464;
	        this.match(NMEAParser.SEP);
	        this.state = 474;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4 || _la===16) {
	            this.state = 468;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 465;
	                this.match(NMEAParser.T__3);
	                this.state = 470;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 471;
	            this.match(NMEAParser.NUMBER);
	            this.state = 476;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 477;
	        this.match(NMEAParser.SEP);
	        this.state = 487;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4 || _la===16) {
	            this.state = 481;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 478;
	                this.match(NMEAParser.T__3);
	                this.state = 483;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 484;
	            this.match(NMEAParser.NUMBER);
	            this.state = 489;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 490;
	        this.match(NMEAParser.SEP);
	        this.state = 500;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4 || _la===16) {
	            this.state = 494;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 491;
	                this.match(NMEAParser.T__3);
	                this.state = 496;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 497;
	            this.match(NMEAParser.NUMBER);
	            this.state = 502;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 503;
	        this.match(NMEAParser.CHECKSUM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gsv() {
	    let localctx = new GsvContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, NMEAParser.RULE_gsv);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 505;
	        this.match(NMEAParser.DEVICE);
	        this.state = 506;
	        this.match(NMEAParser.T__6);
	        this.state = 507;
	        this.match(NMEAParser.SEP);
	        this.state = 509; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 508;
	            _la = this._input.LA(1);
	            if(!(_la===16 || _la===18)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 511; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===16 || _la===18);
	        this.state = 513;
	        this.match(NMEAParser.CHECKSUM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hdt() {
	    let localctx = new HdtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, NMEAParser.RULE_hdt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 515;
	        this.match(NMEAParser.DEVICE);
	        this.state = 516;
	        this.match(NMEAParser.T__7);
	        this.state = 517;
	        this.match(NMEAParser.SEP);
	        this.state = 518;
	        this.match(NMEAParser.NUMBER);
	        this.state = 519;
	        this.match(NMEAParser.SEP);
	        this.state = 523;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 520;
	            this.match(NMEAParser.LETTERS);
	            this.state = 525;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 526;
	        this.match(NMEAParser.CHECKSUM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mwv() {
	    let localctx = new MwvContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, NMEAParser.RULE_mwv);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 528;
	        this.match(NMEAParser.DEVICE);
	        this.state = 529;
	        this.match(NMEAParser.T__8);
	        this.state = 530;
	        this.match(NMEAParser.SEP);
	        this.state = 531;
	        this.match(NMEAParser.NUMBER);
	        this.state = 532;
	        this.match(NMEAParser.SEP);
	        this.state = 533;
	        this.match(NMEAParser.LETTERS);
	        this.state = 534;
	        this.match(NMEAParser.SEP);
	        this.state = 535;
	        this.match(NMEAParser.NUMBER);
	        this.state = 536;
	        this.match(NMEAParser.SEP);
	        this.state = 537;
	        this.match(NMEAParser.LETTERS);
	        this.state = 538;
	        this.match(NMEAParser.SEP);
	        this.state = 539;
	        this.match(NMEAParser.LETTERS);
	        this.state = 540;
	        this.match(NMEAParser.CHECKSUM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rmc() {
	    let localctx = new RmcContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, NMEAParser.RULE_rmc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 542;
	        this.match(NMEAParser.DEVICE);
	        this.state = 543;
	        this.match(NMEAParser.T__9);
	        this.state = 544;
	        this.match(NMEAParser.SEP);
	        this.state = 548;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 545;
	            this.match(NMEAParser.NUMBER);
	            this.state = 550;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 551;
	        this.match(NMEAParser.SEP);
	        this.state = 552;
	        this.match(NMEAParser.LETTERS);
	        this.state = 553;
	        this.match(NMEAParser.SEP);
	        this.state = 557;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 554;
	            this.match(NMEAParser.NUMBER);
	            this.state = 559;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 560;
	        this.match(NMEAParser.SEP);
	        this.state = 564;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 561;
	            this.match(NMEAParser.LETTERS);
	            this.state = 566;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 567;
	        this.match(NMEAParser.SEP);
	        this.state = 571;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 568;
	            this.match(NMEAParser.NUMBER);
	            this.state = 573;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 574;
	        this.match(NMEAParser.SEP);
	        this.state = 578;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 575;
	            this.match(NMEAParser.LETTERS);
	            this.state = 580;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 581;
	        this.match(NMEAParser.SEP);
	        this.state = 585;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 582;
	            this.match(NMEAParser.SIGN);
	            this.state = 587;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 591;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 588;
	            this.match(NMEAParser.NUMBER);
	            this.state = 593;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 594;
	        this.match(NMEAParser.SEP);
	        this.state = 598;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 595;
	            this.match(NMEAParser.NUMBER);
	            this.state = 600;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 601;
	        this.match(NMEAParser.SEP);
	        this.state = 605;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 602;
	            this.match(NMEAParser.NUMBER);
	            this.state = 607;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 608;
	        this.match(NMEAParser.SEP);
	        this.state = 612;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 609;
	            this.match(NMEAParser.NUMBER);
	            this.state = 614;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 615;
	        this.match(NMEAParser.SEP);
	        this.state = 619;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 616;
	            this.match(NMEAParser.LETTERS);
	            this.state = 621;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 635;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 626;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===18) {
	                this.state = 622;
	                this.match(NMEAParser.SEP);
	                this.state = 623;
	                this.match(NMEAParser.LETTERS);
	                this.state = 628;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.state = 632;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===18) {
	                this.state = 629;
	                this.match(NMEAParser.SEP);
	                this.state = 634;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	        this.state = 637;
	        this.match(NMEAParser.CHECKSUM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rsa() {
	    let localctx = new RsaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, NMEAParser.RULE_rsa);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 639;
	        this.match(NMEAParser.DEVICE);
	        this.state = 640;
	        this.match(NMEAParser.T__10);
	        this.state = 641;
	        this.match(NMEAParser.SEP);
	        this.state = 642;
	        _la = this._input.LA(1);
	        if(!(_la===16 || _la===20)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 643;
	        this.match(NMEAParser.SEP);
	        this.state = 644;
	        this.match(NMEAParser.LETTERS);
	        this.state = 645;
	        this.match(NMEAParser.SEP);
	        this.state = 646;
	        this.match(NMEAParser.NUMBER);
	        this.state = 647;
	        this.match(NMEAParser.SEP);
	        this.state = 648;
	        this.match(NMEAParser.LETTERS);
	        this.state = 649;
	        this.match(NMEAParser.CHECKSUM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vhw() {
	    let localctx = new VhwContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, NMEAParser.RULE_vhw);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 651;
	        this.match(NMEAParser.DEVICE);
	        this.state = 652;
	        this.match(NMEAParser.T__11);
	        this.state = 653;
	        this.match(NMEAParser.SEP);
	        this.state = 657;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4) {
	            this.state = 654;
	            this.match(NMEAParser.T__3);
	            this.state = 659;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 663;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 660;
	            this.match(NMEAParser.NUMBER);
	            this.state = 665;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 666;
	        this.match(NMEAParser.SEP);
	        this.state = 670;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 667;
	            this.match(NMEAParser.LETTERS);
	            this.state = 672;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 673;
	        this.match(NMEAParser.SEP);
	        this.state = 677;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4) {
	            this.state = 674;
	            this.match(NMEAParser.T__3);
	            this.state = 679;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 683;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 680;
	            this.match(NMEAParser.NUMBER);
	            this.state = 685;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 686;
	        this.match(NMEAParser.SEP);
	        this.state = 690;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 687;
	            this.match(NMEAParser.LETTERS);
	            this.state = 692;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 693;
	        this.match(NMEAParser.SEP);
	        this.state = 697;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4) {
	            this.state = 694;
	            this.match(NMEAParser.T__3);
	            this.state = 699;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 703;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 700;
	            this.match(NMEAParser.NUMBER);
	            this.state = 705;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 706;
	        this.match(NMEAParser.SEP);
	        this.state = 710;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 707;
	            this.match(NMEAParser.LETTERS);
	            this.state = 712;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 713;
	        this.match(NMEAParser.SEP);
	        this.state = 717;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4) {
	            this.state = 714;
	            this.match(NMEAParser.T__3);
	            this.state = 719;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 723;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 720;
	            this.match(NMEAParser.NUMBER);
	            this.state = 725;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 726;
	        this.match(NMEAParser.SEP);
	        this.state = 730;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 727;
	            this.match(NMEAParser.LETTERS);
	            this.state = 732;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 733;
	        this.match(NMEAParser.CHECKSUM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vtg() {
	    let localctx = new VtgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, NMEAParser.RULE_vtg);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 735;
	        this.match(NMEAParser.DEVICE);
	        this.state = 736;
	        this.match(NMEAParser.T__12);
	        this.state = 737;
	        this.match(NMEAParser.SEP);
	        this.state = 741;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4) {
	            this.state = 738;
	            this.match(NMEAParser.T__3);
	            this.state = 743;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 747;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 744;
	            this.match(NMEAParser.NUMBER);
	            this.state = 749;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 750;
	        this.match(NMEAParser.SEP);

	        this.state = 751;
	        this.match(NMEAParser.LETTERS);
	        this.state = 752;
	        this.match(NMEAParser.SEP);
	        this.state = 756;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4) {
	            this.state = 753;
	            this.match(NMEAParser.T__3);
	            this.state = 758;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 762;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 759;
	            this.match(NMEAParser.NUMBER);
	            this.state = 764;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 765;
	        this.match(NMEAParser.SEP);

	        this.state = 766;
	        this.match(NMEAParser.LETTERS);
	        this.state = 767;
	        this.match(NMEAParser.SEP);
	        this.state = 771;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4) {
	            this.state = 768;
	            this.match(NMEAParser.T__3);
	            this.state = 773;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 777;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 774;
	            this.match(NMEAParser.NUMBER);
	            this.state = 779;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 780;
	        this.match(NMEAParser.SEP);

	        this.state = 781;
	        this.match(NMEAParser.LETTERS);
	        this.state = 782;
	        this.match(NMEAParser.SEP);
	        this.state = 786;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4) {
	            this.state = 783;
	            this.match(NMEAParser.T__3);
	            this.state = 788;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 792;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 789;
	            this.match(NMEAParser.NUMBER);
	            this.state = 794;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 795;
	        this.match(NMEAParser.SEP);
	        this.state = 800;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,103,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 796;
	                this.match(NMEAParser.LETTERS);
	                this.state = 797;
	                this.match(NMEAParser.SEP); 
	            }
	            this.state = 802;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,103,this._ctx);
	        }

	        this.state = 806;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 803;
	            this.match(NMEAParser.LETTERS);
	            this.state = 808;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 809;
	        this.match(NMEAParser.CHECKSUM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xdr() {
	    let localctx = new XdrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, NMEAParser.RULE_xdr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 811;
	        this.match(NMEAParser.DEVICE);
	        this.state = 812;
	        this.match(NMEAParser.T__13);
	        this.state = 813;
	        this.match(NMEAParser.SEP);
	        this.state = 829;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 814;
	            this.match(NMEAParser.LETTERS);
	            this.state = 815;
	            this.match(NMEAParser.SEP);
	            this.state = 816;
	            _la = this._input.LA(1);
	            if(!(_la===16 || _la===20)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 817;
	            this.match(NMEAParser.SEP);
	            this.state = 818;
	            this.match(NMEAParser.LETTERS);
	            this.state = 819;
	            this.match(NMEAParser.SEP);
	            this.state = 820;
	            this.match(NMEAParser.LETTERS);
	            this.state = 824;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===18) {
	                this.state = 821;
	                this.match(NMEAParser.SEP);
	                this.state = 826;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 831;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 832;
	        this.match(NMEAParser.CHECKSUM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

NMEAParser.EOF = antlr4.Token.EOF;
NMEAParser.T__0 = 1;
NMEAParser.T__1 = 2;
NMEAParser.T__2 = 3;
NMEAParser.T__3 = 4;
NMEAParser.T__4 = 5;
NMEAParser.T__5 = 6;
NMEAParser.T__6 = 7;
NMEAParser.T__7 = 8;
NMEAParser.T__8 = 9;
NMEAParser.T__9 = 10;
NMEAParser.T__10 = 11;
NMEAParser.T__11 = 12;
NMEAParser.T__12 = 13;
NMEAParser.T__13 = 14;
NMEAParser.DEVICE = 15;
NMEAParser.NUMBER = 16;
NMEAParser.EMPTY_LINE = 17;
NMEAParser.SEP = 18;
NMEAParser.SIGN = 19;
NMEAParser.SIGNED = 20;
NMEAParser.TIME_STAMP = 21;
NMEAParser.CHECKSUM = 22;
NMEAParser.LETTERS = 23;
NMEAParser.EXPONENT = 24;

NMEAParser.RULE_nmea = 0;
NMEAParser.RULE_sentence = 1;
NMEAParser.RULE_aam = 2;
NMEAParser.RULE_dbt = 3;
NMEAParser.RULE_gga = 4;
NMEAParser.RULE_gll = 5;
NMEAParser.RULE_gsa = 6;
NMEAParser.RULE_gsv = 7;
NMEAParser.RULE_hdt = 8;
NMEAParser.RULE_mwv = 9;
NMEAParser.RULE_rmc = 10;
NMEAParser.RULE_rsa = 11;
NMEAParser.RULE_vhw = 12;
NMEAParser.RULE_vtg = 13;
NMEAParser.RULE_xdr = 14;

class NmeaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NMEAParser.RULE_nmea;
    }

	EOF() {
	    return this.getToken(NMEAParser.EOF, 0);
	};

	sentence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SentenceContext);
	    } else {
	        return this.getTypedRuleContext(SentenceContext,i);
	    }
	};

	EMPTY_LINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.EMPTY_LINE);
	    } else {
	        return this.getToken(NMEAParser.EMPTY_LINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.enterNmea(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.exitNmea(this);
		}
	}


}



class SentenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NMEAParser.RULE_sentence;
    }

	aam() {
	    return this.getTypedRuleContext(AamContext,0);
	};

	dbt() {
	    return this.getTypedRuleContext(DbtContext,0);
	};

	gga() {
	    return this.getTypedRuleContext(GgaContext,0);
	};

	gll() {
	    return this.getTypedRuleContext(GllContext,0);
	};

	gsa() {
	    return this.getTypedRuleContext(GsaContext,0);
	};

	gsv() {
	    return this.getTypedRuleContext(GsvContext,0);
	};

	hdt() {
	    return this.getTypedRuleContext(HdtContext,0);
	};

	mwv() {
	    return this.getTypedRuleContext(MwvContext,0);
	};

	rmc() {
	    return this.getTypedRuleContext(RmcContext,0);
	};

	rsa() {
	    return this.getTypedRuleContext(RsaContext,0);
	};

	vhw() {
	    return this.getTypedRuleContext(VhwContext,0);
	};

	vtg() {
	    return this.getTypedRuleContext(VtgContext,0);
	};

	xdr() {
	    return this.getTypedRuleContext(XdrContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.enterSentence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.exitSentence(this);
		}
	}


}



class AamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NMEAParser.RULE_aam;
    }

	DEVICE() {
	    return this.getToken(NMEAParser.DEVICE, 0);
	};

	SEP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.SEP);
	    } else {
	        return this.getToken(NMEAParser.SEP, i);
	    }
	};


	CHECKSUM() {
	    return this.getToken(NMEAParser.CHECKSUM, 0);
	};

	LETTERS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.LETTERS);
	    } else {
	        return this.getToken(NMEAParser.LETTERS, i);
	    }
	};


	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.NUMBER);
	    } else {
	        return this.getToken(NMEAParser.NUMBER, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.enterAam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.exitAam(this);
		}
	}


}



class DbtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NMEAParser.RULE_dbt;
    }

	DEVICE() {
	    return this.getToken(NMEAParser.DEVICE, 0);
	};

	SEP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.SEP);
	    } else {
	        return this.getToken(NMEAParser.SEP, i);
	    }
	};


	LETTERS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.LETTERS);
	    } else {
	        return this.getToken(NMEAParser.LETTERS, i);
	    }
	};


	CHECKSUM() {
	    return this.getToken(NMEAParser.CHECKSUM, 0);
	};

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.NUMBER);
	    } else {
	        return this.getToken(NMEAParser.NUMBER, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.enterDbt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.exitDbt(this);
		}
	}


}



class GgaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NMEAParser.RULE_gga;
    }

	DEVICE() {
	    return this.getToken(NMEAParser.DEVICE, 0);
	};

	SEP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.SEP);
	    } else {
	        return this.getToken(NMEAParser.SEP, i);
	    }
	};


	LETTERS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.LETTERS);
	    } else {
	        return this.getToken(NMEAParser.LETTERS, i);
	    }
	};


	CHECKSUM() {
	    return this.getToken(NMEAParser.CHECKSUM, 0);
	};

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.NUMBER);
	    } else {
	        return this.getToken(NMEAParser.NUMBER, i);
	    }
	};


	SIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.SIGN);
	    } else {
	        return this.getToken(NMEAParser.SIGN, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.enterGga(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.exitGga(this);
		}
	}


}



class GllContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NMEAParser.RULE_gll;
    }

	DEVICE() {
	    return this.getToken(NMEAParser.DEVICE, 0);
	};

	SEP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.SEP);
	    } else {
	        return this.getToken(NMEAParser.SEP, i);
	    }
	};


	LETTERS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.LETTERS);
	    } else {
	        return this.getToken(NMEAParser.LETTERS, i);
	    }
	};


	CHECKSUM() {
	    return this.getToken(NMEAParser.CHECKSUM, 0);
	};

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.NUMBER);
	    } else {
	        return this.getToken(NMEAParser.NUMBER, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.enterGll(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.exitGll(this);
		}
	}


}



class GsaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NMEAParser.RULE_gsa;
    }

	DEVICE() {
	    return this.getToken(NMEAParser.DEVICE, 0);
	};

	SEP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.SEP);
	    } else {
	        return this.getToken(NMEAParser.SEP, i);
	    }
	};


	LETTERS() {
	    return this.getToken(NMEAParser.LETTERS, 0);
	};

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.NUMBER);
	    } else {
	        return this.getToken(NMEAParser.NUMBER, i);
	    }
	};


	CHECKSUM() {
	    return this.getToken(NMEAParser.CHECKSUM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.enterGsa(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.exitGsa(this);
		}
	}


}



class GsvContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NMEAParser.RULE_gsv;
    }

	DEVICE() {
	    return this.getToken(NMEAParser.DEVICE, 0);
	};

	SEP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.SEP);
	    } else {
	        return this.getToken(NMEAParser.SEP, i);
	    }
	};


	CHECKSUM() {
	    return this.getToken(NMEAParser.CHECKSUM, 0);
	};

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.NUMBER);
	    } else {
	        return this.getToken(NMEAParser.NUMBER, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.enterGsv(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.exitGsv(this);
		}
	}


}



class HdtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NMEAParser.RULE_hdt;
    }

	DEVICE() {
	    return this.getToken(NMEAParser.DEVICE, 0);
	};

	SEP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.SEP);
	    } else {
	        return this.getToken(NMEAParser.SEP, i);
	    }
	};


	NUMBER() {
	    return this.getToken(NMEAParser.NUMBER, 0);
	};

	CHECKSUM() {
	    return this.getToken(NMEAParser.CHECKSUM, 0);
	};

	LETTERS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.LETTERS);
	    } else {
	        return this.getToken(NMEAParser.LETTERS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.enterHdt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.exitHdt(this);
		}
	}


}



class MwvContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NMEAParser.RULE_mwv;
    }

	DEVICE() {
	    return this.getToken(NMEAParser.DEVICE, 0);
	};

	SEP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.SEP);
	    } else {
	        return this.getToken(NMEAParser.SEP, i);
	    }
	};


	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.NUMBER);
	    } else {
	        return this.getToken(NMEAParser.NUMBER, i);
	    }
	};


	LETTERS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.LETTERS);
	    } else {
	        return this.getToken(NMEAParser.LETTERS, i);
	    }
	};


	CHECKSUM() {
	    return this.getToken(NMEAParser.CHECKSUM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.enterMwv(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.exitMwv(this);
		}
	}


}



class RmcContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NMEAParser.RULE_rmc;
    }

	DEVICE() {
	    return this.getToken(NMEAParser.DEVICE, 0);
	};

	SEP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.SEP);
	    } else {
	        return this.getToken(NMEAParser.SEP, i);
	    }
	};


	LETTERS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.LETTERS);
	    } else {
	        return this.getToken(NMEAParser.LETTERS, i);
	    }
	};


	CHECKSUM() {
	    return this.getToken(NMEAParser.CHECKSUM, 0);
	};

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.NUMBER);
	    } else {
	        return this.getToken(NMEAParser.NUMBER, i);
	    }
	};


	SIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.SIGN);
	    } else {
	        return this.getToken(NMEAParser.SIGN, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.enterRmc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.exitRmc(this);
		}
	}


}



class RsaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NMEAParser.RULE_rsa;
    }

	DEVICE() {
	    return this.getToken(NMEAParser.DEVICE, 0);
	};

	SEP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.SEP);
	    } else {
	        return this.getToken(NMEAParser.SEP, i);
	    }
	};


	LETTERS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.LETTERS);
	    } else {
	        return this.getToken(NMEAParser.LETTERS, i);
	    }
	};


	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.NUMBER);
	    } else {
	        return this.getToken(NMEAParser.NUMBER, i);
	    }
	};


	CHECKSUM() {
	    return this.getToken(NMEAParser.CHECKSUM, 0);
	};

	SIGNED() {
	    return this.getToken(NMEAParser.SIGNED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.enterRsa(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.exitRsa(this);
		}
	}


}



class VhwContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NMEAParser.RULE_vhw;
    }

	DEVICE() {
	    return this.getToken(NMEAParser.DEVICE, 0);
	};

	SEP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.SEP);
	    } else {
	        return this.getToken(NMEAParser.SEP, i);
	    }
	};


	CHECKSUM() {
	    return this.getToken(NMEAParser.CHECKSUM, 0);
	};

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.NUMBER);
	    } else {
	        return this.getToken(NMEAParser.NUMBER, i);
	    }
	};


	LETTERS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.LETTERS);
	    } else {
	        return this.getToken(NMEAParser.LETTERS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.enterVhw(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.exitVhw(this);
		}
	}


}



class VtgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NMEAParser.RULE_vtg;
    }

	DEVICE() {
	    return this.getToken(NMEAParser.DEVICE, 0);
	};

	SEP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.SEP);
	    } else {
	        return this.getToken(NMEAParser.SEP, i);
	    }
	};


	CHECKSUM() {
	    return this.getToken(NMEAParser.CHECKSUM, 0);
	};

	LETTERS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.LETTERS);
	    } else {
	        return this.getToken(NMEAParser.LETTERS, i);
	    }
	};


	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.NUMBER);
	    } else {
	        return this.getToken(NMEAParser.NUMBER, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.enterVtg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.exitVtg(this);
		}
	}


}



class XdrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NMEAParser.RULE_xdr;
    }

	DEVICE() {
	    return this.getToken(NMEAParser.DEVICE, 0);
	};

	SEP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.SEP);
	    } else {
	        return this.getToken(NMEAParser.SEP, i);
	    }
	};


	CHECKSUM() {
	    return this.getToken(NMEAParser.CHECKSUM, 0);
	};

	LETTERS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.LETTERS);
	    } else {
	        return this.getToken(NMEAParser.LETTERS, i);
	    }
	};


	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.NUMBER);
	    } else {
	        return this.getToken(NMEAParser.NUMBER, i);
	    }
	};


	SIGNED = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NMEAParser.SIGNED);
	    } else {
	        return this.getToken(NMEAParser.SIGNED, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.enterXdr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NMEAListener ) {
	        listener.exitXdr(this);
		}
	}


}




NMEAParser.NmeaContext = NmeaContext; 
NMEAParser.SentenceContext = SentenceContext; 
NMEAParser.AamContext = AamContext; 
NMEAParser.DbtContext = DbtContext; 
NMEAParser.GgaContext = GgaContext; 
NMEAParser.GllContext = GllContext; 
NMEAParser.GsaContext = GsaContext; 
NMEAParser.GsvContext = GsvContext; 
NMEAParser.HdtContext = HdtContext; 
NMEAParser.MwvContext = MwvContext; 
NMEAParser.RmcContext = RmcContext; 
NMEAParser.RsaContext = RsaContext; 
NMEAParser.VhwContext = VhwContext; 
NMEAParser.VtgContext = VtgContext; 
NMEAParser.XdrContext = XdrContext; 
